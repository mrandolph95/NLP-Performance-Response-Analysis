# -*- coding: utf-8 -*-
"""Performance Word Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-9dmt-Vt8cnpqFQwVQ-V0EJWe8gFao4N
"""

pip install emoji

import pandas as pd
import emoji
import re
from collections import Counter
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.util import ngrams
import matplotlib.pyplot as plt
from google.colab import drive

import nltk
nltk.download('stopwords')
nltk.download('punkt_tab')

drive.mount('/content/drive')
df_beyonce = pd.read_csv('/content/drive/MyDrive/beyonce_sentiment.csv')
df_kendrick = pd.read_csv('/content/drive/MyDrive/kendrick_sentiment.csv')

# Drop empty lines and make comments strings
b_comments = df_beyonce['Comments'].dropna().astype(str)
k_comments = df_kendrick['Comments'].dropna().astype(str)

# Function to process each comment
def process_comments(comments_df):
  # Define stopwords and emoji patterns
  stopwords_set = set(stopwords.words('english'))

  # Token counters for words and emojis
  word_counter = Counter()
  emoji_counter = Counter()

  for text in comments_df:
    # Extract emojis
    emojis = [e['emoji'] for e in emoji.emoji_list(text)]
    emoji_counter.update(emojis)

    # Remove emojis and tokenize words
    clean_text = ''.join(ch for ch in text if ch not in emojis)
    tokens = word_tokenize(clean_text.lower())
    filtered_tokens = [word for word in tokens if word.isalpha() and word not in stopwords_set]
    word_counter.update(filtered_tokens)

  return word_counter, emoji_counter

b_words, b_emojis = process_comments(b_comments)
k_words, k_emojis = process_comments(k_comments)

print("Top 20 Words in Beyoncé's Performance:")
for word, freq in b_words.most_common(20):
  print(f"{word}: {freq}")
  print()

print("Top 20 Words in Kendrick's Performance:")
for word, freq in k_words.most_common(20):
  print(f"{word}: {freq}")
  print()

print("Top 20 Emojis in Beyoncé's Performance:")
for emoji, freq in b_emojis.most_common(20):
  print(f"{emoji}: {freq}")
  print()

print("Top 20 Emojis in Kendrick's Performance")
for emoji, freq in k_emojis.most_common(20):
  print(f"{emoji}: {freq}")
  print()

# Top words
def save_and_plot_words(counter, title, filename_prefix):
    # Convert Counter to DataFrame
    df = pd.DataFrame(counter.most_common(20), columns=['Word', 'Frequency'])

    # Save to CSV
    df.to_csv(f"/content/drive/MyDrive/{filename_prefix}_top_words.csv", index=False)

    # Plot bar chart
    plt.figure(figsize=(10, 5))
    plt.bar(df['Word'], df['Frequency'], color='skyblue')
    plt.xticks(rotation=45, ha='right')
    plt.title(f"Top 20 Words in {title}")
    plt.tight_layout()
    plt.savefig(f"/content/drive/MyDrive/{filename_prefix}_top_words.png")
    plt.show()

save_and_plot_words(b_words, "Beyoncé's Performance", "beyonce")
save_and_plot_words(k_words, "Kendrick's Performance", "kendrick")

# Process bigrams
def process_comment_bigrams(comments_df):
    stopwords_set = set(stopwords.words('english'))
    word_counter = Counter()
    bigram_counter = Counter()
    emoji_counter = Counter()

    for text in comments_df:
        emojis = [e['emoji'] for e in emoji.emoji_list(text)]
        emoji_counter.update(emojis)

        clean_text = ''.join(ch for ch in text if ch not in emojis)
        tokens = word_tokenize(clean_text.lower())
        filtered = [word for word in tokens if word.isalpha() and word not in stopwords_set]

        word_counter.update(filtered)
        bigram_counter.update(ngrams(filtered, 2))

    return word_counter, bigram_counter, emoji_counter

b_words, b_bigrams, b_emojis = process_comment_bigrams(b_comments)
k_words, k_bigrams, k_emojis = process_comment_bigrams(k_comments)

# Plot and save bigrams
def save_and_plot_bigrams(counter, title, filename_prefix):
    bigram_df = pd.DataFrame(counter.most_common(20), columns=['Phrase', 'Frequency'])
    bigram_df['Phrase'] = bigram_df['Phrase'].apply(lambda x: ' '.join(x))
    bigram_df.to_csv(f"/content/drive/MyDrive/{filename_prefix}_top_bigrams.csv", index=False)

    plt.figure(figsize=(10, 5))
    plt.bar(bigram_df['Phrase'], bigram_df['Frequency'], color='coral')
    plt.xticks(rotation=45, ha='right')
    plt.title(f"Top 20 Phrases in {title}")
    plt.tight_layout()
    plt.savefig(f"/content/drive/MyDrive/{filename_prefix}_top_bigrams.png")
    plt.show()

# Run for both
save_and_plot_bigrams(b_bigrams, "Beyoncé's Performance", "beyonce")
save_and_plot_bigrams(k_bigrams, "Kendrick's Performance", "kendrick")

